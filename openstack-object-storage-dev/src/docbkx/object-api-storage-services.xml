<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY COPY    '<command xmlns="http://docbook.org/ns/docbook">COPY</command>'>
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY HEAD   '<command xmlns="http://docbook.org/ns/docbook">HEAD</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

<!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Check_mark_23x20_02.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>

<!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Arrow_east.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>
]>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_object-storage-dev-api-storage">
      <title>API Operations for Storage Services</title>
      <para>The following section describes the ReST API for interacting with the storage component
        of OpenStack Object Storage. All requests will be directed to the host and URL described in the
          <code>X-Storage-Url</code> HTTP header obtained during successful authentication.</para>
      <para>The following are some requirements for the use of the storage services:</para>
      <itemizedlist>
        <listitem>
          <para>Container names cannot exceed 256 bytes and cannot contain a '/' character</para>
        </listitem>
        <listitem>
          <para>Object names cannot exceed 1024 bytes and have no character restrictions</para>
        </listitem>
        <listitem>
          <para>Object and container names must be URL-encoded and UTF-8 encoded</para>
        </listitem>
      </itemizedlist>
      <para>
        <!--<info>Added paragraph to forecast info structure -\- dsh -2012-03-09 </info>-->
        The following sections describe the actions that may be performed within the
        storage system. The first section addresses actions that can be taken on the account
        level of the storage system. The second section addresses actions that may be performed
        on containers. The third section addresses actions that may be performed on objects.
      </para>
      <section xml:id="storage-account-services">
        <title>Storage Account Services</title>
        <para>The following operations can be performed at the account level of the URL. For
          example, the URL for the requests below will end with the OpenStack Object Storage account
          string:</para>
        <example>
          <title>Storage Account HTTP Request: General Structure</title>
          <literallayout class="monospaced">
  METHOD /v1/&lt;account> HTTP/1.1
                </literallayout>
        </example>
        <section xml:id="s_listcontainers">
          <title>List Containers</title>
          <para>&GET; operations against the <code>X-Storage-Url</code> for an account
              are performed to retrieve a list of existing storage containers ordered by name. The sort order for the name
              is based on a <link xlink:href="http://www.sqlite.org/datatype3.html#collation">binary comparison</link>, a single built-in 
              collating sequence that compares string data using SQLite's memcmp() function, 
              regardless of text encoding. The following list describes the optional query parameters that are supported with this
              request.</para>
          <variablelist>
            <title>Query Parameters</title>
            <varlistentry>
              <term><code>limit</code></term>
              <listitem>
                <para>For an integer value <inlineequation>
                    <mathphrase><emphasis>n</emphasis></mathphrase>
                  </inlineequation>, limits the number of results to <inlineequation>
                    <mathphrase><emphasis>n</emphasis></mathphrase>
                  </inlineequation> values.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>marker</code></term>
              <listitem>
                <para>Given a string value <inlineequation>
                    <mathphrase><emphasis>x</emphasis></mathphrase>
                  </inlineequation>, return container names greater in value than the specified
                  marker.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>end_marker</code></term>
              <listitem>
                <para>Given a string value <inlineequation>
                    <mathphrase><emphasis>x</emphasis></mathphrase>
                  </inlineequation>, return container names less in value than the specified
                  marker.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>format</code></term>
              <listitem>
                <para>Specify either <code>json</code> or <code>xml</code> to return the respective
                  serialized response.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>At this time, a <code>prefix</code> query parameter is not supported at the account
            level.</para>
          <example>
            <title>Containers List Request</title>
            <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                      </literallayout>
          </example>
          <para>A list of containers is returned in the response body, one container per line. A 204
            (No Content) HTTP return code will be passed back if the account has no
            containers.</para>
          <example>
            <title>Containers List Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 200 Ok
  Date: Thu, 07 Jun 2010 18:57:07 GMT
  Server: Apache
  Content-Type: text/plain; charset=UTF-8
  Content-Length: 32
                      </literallayout>
            <literallayout class="monospaced">
  images
  movies
  documents
  backups
                      </literallayout>
          </example>
          <section xml:id="s_serializedlistoutput">
            <title>Serialized List Output</title>
            <para>If a <code>format=xml</code> or <code>format=json</code> argument is appended to
              the storage account URL, the service will serve extended container information
              serialized in the chosen format. The sample responses below are formatted for
              readability.</para>
            <example>
              <title>Containers Details Request: JSON</title>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>?format=json HTTP/1.1
  Host: storage.swiftdrive.com
  Content-Length: 0
  X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4
                      </literallayout>
            </example>
            <example>
              <title>Containers Details Response: JSON</title>
              <literallayout class="monospaced">
  HTTP/1.1 200 OK
  Date: Tue, 25 Nov 2008 19:39:13 GMT
  Server: Apache
  Content-Type: application/json; charset=utf-8
                      </literallayout>
              <programlisting language="javascript">
  [
    {"name":"test_container_1", "count":2, "bytes":78},
    {"name":"test_container_2", "count":1, "bytes":17}
  ] 
                      </programlisting>
            </example>
            <example>
              <title>Containers Details Request: XML</title>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>?format=xml HTTP/1.1
  Host: storage.swiftdrive.com
  Content-Length: 0
  X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4
                      </literallayout>
            </example>
            <example>
              <title>Containers Details Response: XML</title>
              <literallayout class="monospaced">
  HTTP/1.1 200 OK
  Date: Tue, 25 Nov 2008 19:42:35 GMT
  Server: Apache
  Content-Type: application/xml; charset=utf-8
                      </literallayout>
              <programlisting language="xml">
  &lt;?xml version="1.0" encoding="UTF-8"?>

  &lt;account name="MichaelBarton">
    &lt;container>
      &lt;name>test_container_1&lt;/name>
      &lt;count>2&lt;/count>
      &lt;bytes>78&lt;/bytes>
    &lt;/container>
    &lt;container>
      &lt;name>test_container_2&lt;/name>
      &lt;count>1&lt;/count>
      &lt;bytes>17&lt;/bytes>
    &lt;/container>
  &lt;/account>
                      </programlisting>
            </example>
          </section>
          <section xml:id="s_list-large-number-containers">
            <title>Controlling a Large List of Containers</title>
            <para>The system returns a maximum of 10,000 container names per request. To
              retrieve subsequent container names, another request must be made with the 'marker'
              parameter. The marker indicates where the last list left off;  the system returns
              container names greater than this marker, up to 10,000 again. Note that the ‘marker’
              value should be URL-encoded prior to sending the HTTP request.</para>
            <para>If 10,000 is larger than desired, use the 'limit' parameter.</para>
            <para>If the number of container names returned equals the limit given (or 10,000 if no
              limit is given), you may assume there are more container names.</para>
            <example>
              <title>List Large Number of Containers</title>
              <para>For example, let's use a listing of five container names</para>
              <literallayout class="monospaced">
  apples
  bananas
  kiwis
  oranges
  pears
                    </literallayout>
              <para>We'll use a limit of two to show how things work:</para>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>?limit=2
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
              <literallayout class="monospaced">
  apples
  bananas
                    </literallayout>
              <para>Since we received two items back, we can assume there are more container names
                to list, so we make another request with a marker of the last item returned:</para>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>?limit=2&amp;marker=bananas
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
              <literallayout class="monospaced">
  kiwis
  oranges
                    </literallayout>
              <para>Again,  two items are returned; there may be more:</para>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>?limit=2&amp;marker=oranges
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
              <literallayout class="monospaced">
  pears
                    </literallayout>
              <para>With this one-item response we received less than the limit number of container
                names, indicating that this is the end of the list.</para>
              <para>
                 By using <code>end_marker</code> we can limit the result set to
                 container names less than the given value.
              </para>
              <literallayout class="monospaced">
  GET /&lt;api version&gt;&lt;account&gt;?end_marker=oranges
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
              </literallayout>
              <literallayout class="monospaced">
  apples
  bananas
  kiwis
              </literallayout>
            </example>
          </section>
        </section>
        <section xml:id="retrieve-account-metadata">
          <title>Retrieve Account Metadata</title>
          <para>&HEAD; operations against an account are
          performed to retrieve the number of containers and the total
          bytes stored in OpenStack Object Storage for the account. This
          information is returned in two custom headers,
          <code>X-Account-Container-Count</code> and
          <code>X-Account-Bytes-Used</code>. Since the storage system
          is designed to store large amounts of data, care should be
          taken when representing the total bytes response as an
          integer; when possible, convert it to a 64-bit unsigned
          integer if your platform supports that primitive
          type.</para>
          <example>
            <title>Account Metadata Request </title>
            <literallayout class="monospaced">
  HEAD /&lt;api version>/&lt;account> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                      </literallayout>
          </example>
          <para>The HTTP return code will be 204 (No Content) if the request succeeds. A 401
            (Unauthorized) will be returned for an invalid account or access key.</para>
          <example>
            <title>Account Metadata Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 204 No Content
  Date: Thu, 07 Jun 2010 18:57:07 GMT
  Server: Apache
  X-Account-Container-Count: 3
  X-Account-Bytes-Used: 323479
                      </literallayout>
          </example>
        </section>
        <section xml:id="create-update-account-metadata">
          <title>Create/Update Account Metadata</title>
          <para>
            You can associate custom metadata headers with the account level
            URI. These headers must take the format
            <code>X-Account-Meta-*</code>.
          </para>
          <para>
            To create or update an account metadata header use the &POST; query.
            Subsequent requests for the same key/value pair overwrite the
            previous value.
          </para>
          <example>
            <title>Update Account Metadata Request</title>
            <literallayout class="monospaced">
        POST /&lt;api version&gt;/&lt;account&gt; HTTP/1.1
        Host: storage.clouddrive.com
        X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
        X-Account-Meta-Book: MobyDick
        X-Account-Meta-Subject: Whaling
            </literallayout>
          </example>
          <para>
            No response body is returned. A status code of 204 (No Content)
            indicates success.
          </para>
          <example>
            <title>Update Account Metadata Response</title>
            <literallayout class="monospaced">
        HTTP/1.1 204 No Content
        Content-Length: 0
        Content-Type: text/html; charset=UTF-8
        Date: Sat, 09 Jun 2012 19:16:29 GMT
            </literallayout>
          </example>
          <para>To confirm your metadata changes, perform a &HEAD; request on the
          account. Do not send the metadata in your &HEAD; request.</para>
          <example>
            <title>View Account Metadata Request</title>
            <literallayout class="monospaced">
        HEAD /&lt;api version&gt;/&lt;account&gt; HTTP/1.1
        Host: storage.clouddrive.com
        X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
            </literallayout>
          </example>
          <example>
            <title>View Account Metadata Response</title>
            <literallayout class="monospaced">
        HTTP/1.1 204 No Content
        X-Account-Meta-Book: MobyDick
        X-Account-Meta-Subject: Whaling
        X-Account-Object-Count: 5
        X-Timestamp: 1323466696.21566
        X-Account-Container-Count: 5
        X-Account-Bytes-Used: 46988
        Accept-Ranges: bytes
        Content-Length: 0
        Date: Sat, 09 Jun 2012 19:16:59 GMT
            </literallayout>
          </example>
        </section>
        <section xml:id="delete-account-metadata">
          <title>Delete Account Metadata</title>
          <para>To delete a metadata header send an empty value for that
            particular header, e.g. <code>X-Account-Meta-Book:</code>. </para>
          <para>If the tool you're using to communicate with Swift doesn't
            support sending empty headers (e.g. older versions of curl) send
            the header
            "X-Remove-Account-Meta-<replaceable>name</replaceable>: <replaceable>arbitrary value</replaceable>",
            e.g. <code>X-Remove-Account-Meta-Book: x</code>. The 
            <emphasis>value</emphasis> is ignored.</para>
          <example>
            <title>Account Metadata Delete Request</title>
            <literallayout class="monospaced">
POST /&lt;api version&gt;/&lt;account&gt; HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
X-Remove-Account-Meta-Book: x
            </literallayout>
            <para>
              No response body is returned. A status code of 204 (No Content)
              indicates success.
            </para>
          </example>
        </section>
      </section>
      <section xml:id="storage-container-services">
        <title>Storage Container Services</title>
        <para>This section documents the ReST operations that can be performed on containers. All
          operations are valid HTTP request methods and will resemble this format:</para>
        <example>
          <title>Storage Container HTTP Request: General Structure</title>
          <literallayout class="monospaced">
  METHOD /v1/&lt;account>/&lt;container> HTTP/1.1
                </literallayout>
        </example>
        <section xml:id="list-objects">
          <title>List Objects</title>
          <para>&GET; operations against a storage container name are performed to
            retrieve a list of objects stored in the container. Additionally, there are a number of
            optional query parameters that can be used to refine the list results.</para>
          <para>A request with no query parameters will return the full list of object names stored
            in the container, up to 10,000 names. Optionally specifying the query parameters will
            filter the full list and return a subset of objects.</para>
          <variablelist>
            <title>Query Parameters</title>
            <varlistentry>
              <term><code>limit</code></term>
              <listitem>
                <para>For an integer value <inlineequation>
                    <mathphrase><emphasis>n</emphasis></mathphrase>
                  </inlineequation>, limits the number of results to at most <inlineequation>
                    <mathphrase><emphasis>n</emphasis></mathphrase>
                  </inlineequation> values.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>marker</code></term>
              <listitem>
                <para>Given a string value <inlineequation>
                    <mathphrase><emphasis>x</emphasis></mathphrase>
                  </inlineequation>, return object names greater in value than the specified
                  marker.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>end_marker</code></term>
              <listitem>
                <para>Given a string value <inlineequation>
                    <mathphrase><emphasis>x</emphasis></mathphrase>
                  </inlineequation>, return object names less in value than the specified
                  marker.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>prefix</code></term>
              <listitem>
                <para>For a string value <inlineequation>
                    <mathphrase><emphasis>x</emphasis></mathphrase>
                  </inlineequation>, causes the results to be limited to object names beginning with
                  the substring <inlineequation>
                    <mathphrase><emphasis>x</emphasis></mathphrase>
                  </inlineequation>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>format</code></term>
              <listitem>
                <para>Specify either <code>json</code> or <code>xml</code> to return the respective
                  serialized response.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>delimiter</code></term>
              <listitem>
                <para>For a character <inlineequation>
                    <mathphrase><emphasis>c</emphasis></mathphrase>
                  </inlineequation>, return all the object names nested in the container (without
                  the need for the directory marker objects).</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <example>
            <title>Objects List Request</title>
            <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>/&lt;container>[?parm=value] HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
          </example>
          <para>A list of objects is returned in the response body, one object name per line. A 204
            (No Content) HTTP return code will be passed back if the container is empty. If the container
            does not exist, a 404 code will return. If an incorrect account is specified, the HTTP return
            code will be 404 (Not Found).</para>
          <example>
            <title>Objects List Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 200 Ok
  Date: Thu, 07 Jun 2010 18:50:19 GMT
  Server: Apache
  Content-Type: text/plain; charset=UTF-8
  Content-Length: 171
                    </literallayout>
            <literallayout class="monospaced">
  kate_beckinsale.jpg
  How To Win Friends And Influence People.pdf
  moms_birthday.jpg
  poodle_strut.mov
  Disturbed - Down With The Sickness.mp3
  army_of_darkness.avi
  the_mad.avi
                    </literallayout>
          </example>
          <section xml:id="serialized-list-output">
            <title>Serialized List Output</title>
            <para>If a <code>format=xml</code> or <code>format=json</code> argument is appended to
            the storage account URL, the service will serve extended object information serialized
            in the chosen format. Other than the <code>?format=xml|json</code> parameter, it will return
            the same status/errors codes. The sample responses below are formatted for
            readability.</para>
            <example>
              <title>Objects Details Request: JSON </title>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>/&lt;container>?format=json HTTP/1.1
  Host: storage.swiftdrive.com
  Content-Length: 0
  X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4
                      </literallayout>
            </example>
            <example>
              <title>Objects Details Response: JSON </title>
              <literallayout class="monospaced">
  HTTP/1.1 200 OK
  Date: Tue, 25 Nov 2008 19:39:13 GMT
  Server: Apache
  Content-Length: 387
  Content-Type: application/json; charset=utf-8
                    </literallayout>
              <programlisting language="javascript">
 [
   {"name":"test_obj_1",
    "hash":"4281c348eaf83e70ddce0e07221c3d28",
    "bytes":14,
    "content_type":"application\/octet-stream",
    "last_modified":"2009-02-03T05:26:32.612278"},
   {"name":"test_obj_2",
    "hash":"b039efe731ad111bc1b0ef221c3849d0",
    "bytes":64,
    "content_type":"application\/octet-stream",
    "last_modified":"2009-02-03T05:26:32.612278"},
 ]
                    </programlisting>
            </example>
            <example>
              <title>Objects Details Request: XML</title>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>/&lt;container>?format=xml HTTP/1.1
  Host: storage.swiftdrive.com
  X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4
                    </literallayout>
            </example>
            <example>
              <title>Objects Details Request: XML </title>
              <literallayout class="monospaced">
  HTTP/1.1 200 OK
  Date: Tue, 25 Nov 2008 19:42:35 GMT
  Server: Apache
  Content-Length: 643
  Content-Type: application/xml; charset=utf-8
                    </literallayout>
              <programlisting language="xml">
  &lt;?xml version="1.0" encoding="UTF-8"?>

  &lt;container name="test_container_1">
    &lt;object>
      &lt;name>test_object_1&lt;/name>
      &lt;hash>4281c348eaf83e70ddce0e07221c3d28&lt;/hash>
      &lt;bytes>14&lt;/bytes>
      &lt;content_type>application/octet-stream&lt;/content_type>
      &lt;last_modified>2009-02-03T05:26:32.612278&lt;/last_modified>
    &lt;/object>
    &lt;object>
      &lt;name>test_object_2&lt;/name>
      &lt;hash>b039efe731ad111bc1b0ef221c3849d0&lt;/hash>
      &lt;bytes>64&lt;/bytes>
      &lt;content_type>application/octet-stream&lt;/content_type>
      &lt;last_modified>2009-02-03T05:26:32.612278&lt;/last_modified>
    &lt;/object>
  &lt;/container>
                    </programlisting>
            </example>
          </section>
          <section xml:id="list-large-number-of-objects">
            <title>Controlling a Large List of Objects</title>
            <para>The system returns a maximum of 10,000 object names per request. To retrieve
              subsequent object names, another request must be made with the 'marker' parameter. The
              marker indicates where the last list left off and the system returns object names
              greater than this marker, up to 10,000 again. Note that the ‘marker’ value should be
              URL encoded prior to sending the HTTP request.</para>
            <para>If 10,000 is larger than desired, a 'limit' parameter may be given.</para>
            <para>If the number of object names returned equals the limit given (or 10,000 if no
              limit is given), it can be assumed there are more object names to be listed. If the
              container name list is exactly divisible by the limit, the last request will simply
              have no content.</para>
            <example>
              <title>List Large Number of Objects</title>
              <para>For an example, let's use a listing of five object names:</para>
              <literallayout class="monospaced">
  gala
  grannysmith
  honeycrisp
  jonagold
  reddelicious
                    </literallayout>
              <para>We'll use a limit of two to show how things work:</para>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>/&lt;container>?limit=2
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
              <literallayout class="monospaced">
  gala
  grannysmith
                    </literallayout>
              <para>Since we received two items back, we can assume there are more object names to
                list. So, we make another request with a marker of the last item returned:</para>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>/&lt;container>?limit=2&amp;marker=grannysmith
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
              <literallayout class="monospaced">
  honeycrisp
  jonagold
                    </literallayout>
              <para>Again we have two items returned; there may be more:</para>
              <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>/&lt;container>?limit=2&amp;marker=jonagold
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
              <literallayout class="monospaced">
  reddelicious
                    </literallayout>
              <para>Now we received less than the limit number of object names, indicating that we
                have the complete list.</para>
              <para>
                 By using <code>end_marker</code> we can limit the result set to
                 object names less than the given value.
              </para>
              <literallayout class="monospaced">
  GET /&lt;api version&gt;&lt;account&gt;/&lt;container&gt;?end_marker=jonagold
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
              </literallayout>
              <literallayout class="monospaced">
  gala
  grannysmith
  honeycrisp
              </literallayout>
            </example>
          </section>
          <section xml:id="pseudo-hierarchical-folders-directories">
              <title>Pseudo-Hierarchical Folders/Directories</title>
              <!-- reworked this section / as path and its elements / are not supported - dsh - 02-16-12 -->
              <para>Although you cannot nest directories in OpenStack Object Storage, you can simulate 
                a hierarchical structure within a single container by adding forward slash
                characters (<literal>/</literal>) in the object name. To navigate the pseudo-directory
                structure, you may use the <code>delimiter</code> query parameter. See the below examples
                for an illustration.</para>
              <note>
                <para>In the example below, the objects reside in a container called <code>backups</code>. 
                  Within that container, the objects are organized in a pseudo-directory called <code>photos</code>. 
                  Keep in mind that the container name is not displayed in the example,
                  but that it is a part of the object URLs. For instance, the URL of the 
                  picture <code>me.jpg</code> is
                  <uri>https://storage.swiftdrive.com/v1/CF_xer7_343/backups/photos/me.jpg</uri>.                 
                </para>
              </note>
              <example>
                <title>Pseudo-Hierarchical Folders/Directories</title>
                <para>
                  To display a list of all the objects in the storage container, use &GET; without a 
                  <code>delimiter</code> or <code>prefix</code>.
                </para>  
                <literallayout class="monospaced">
  GET /v1/AccountString/backups
                </literallayout>
                <para>
                  The system returns status code 200 (OK) and the requested list of the objects.
                </para>             
                <literallayout class="monospaced">
  photos/animals/cats/persian.jpg
  photos/animals/cats/siamese.jpg
  photos/animals/dogs/corgi.jpg
  photos/animals/dogs/poodle.jpg
  photos/animals/dogs/terrier.jpg
  photos/me.jpg
  photos/plants/fern.jpg
  photos/plants/rose.jpg
                </literallayout>
                <para>
                  <!-- The JIRA ticket / doc-97 subsumed / to this location - dsh - 02-03-12 --> 
                  Use the delimiter parameter to limit the displayed results. Any character may be used
                  as a delimiter. However, to use <code>delimiter</code> with pseudo-directories, 
                  use the parameter slash (<literal>/</literal>).
                </para>
                <literallayout class="monospaced">
  GET /v1/AccountString/backups?delimiter=/
              </literallayout>
                <para>
                  The system returns status code 200 (OK) and the requested matching objects. Because
                  we use the slash, only the pseudo-directory <code>photos/</code> displays.
                  Keep in mind that the returned values
                  from a slash <code>delimiter</code> query are not real objects. They have a content-type of 
                  application/directory and are in a subdir section of json and xml results.
                </para>
                <literallayout class="monospaced">
  photos/
              </literallayout>
                <para>
                  Use the <code>prefix</code> parameter with the <code>delimiter</code> parameter 
                  to view the objects inside a pseudo-directory, including further nested 
                  pseudo-directories.
                </para>
                <literallayout class="monospaced">
  GET /v1/AccountString/backups?prefix=photos/&#38;delimiter=/
              </literallayout>
                <para>
                  The system returns status code 200 (OK) and the objects and pseudo-directories within 
                  the top level pseudo-directory.
                </para>
                <literallayout class="monospaced">
  photos/animals/
  photos/me.jpg
  photos/plants/
              </literallayout>
                <para>
                  There is no limit to the amount of nested pseudo-directories you can create. In order to
                  navigate through them, use a longer <code>prefix</code> parameter coupled with the 
                  <code>delimiter</code> parameter. In the sample output below, there is a 
                  pseudo-directory called <code>dogs</code> within the pseudo-directory <code>animals</code>. 
                  In order to navigate directly to the files contained within <code>dogs</code>, enter 
                  the below command.
                </para>
                <literallayout class="monospaced">
  GET /v1/AccountString/backups?prefix=photos/animals/dogs/&#38;delimiter=/
              </literallayout>              
                <para>
                  The system returns status code 200 (OK) and the objects and pseudo-directories within 
                  the nested pseudo-directory.
                </para>
                <literallayout class="monospaced">
  photos/animals/dogs/corgi.jpg
  photos/animals/dogs/poodle.jpg
  photos/animals/dogs/terrier.jpg
              </literallayout>  
              </example>
            </section>
         
          
        </section>
        <section xml:id="create-container">
        <title>Create Container</title>
          <para>&PUT; operations against a storage container are used to create that
            container.</para>
          <para>Containers are storage compartments for your data. The URL encoded name must be less
          than 256 bytes and cannot contain a forward slash '/' character.</para>
          <para>Containers can be assigned custom metadata by including additional HTTP headers on the
              &PUT; request. The custom metadata is assigned to a container via HTTP headers identified
              with the <code>X-Container-Meta-</code> prefix. </para>
          
          <example>
            <title>Container Create Request </title>
            <literallayout class="monospaced">
  PUT /&lt;api version>/&lt;account>/&lt;container> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
          </example>
          <para>No content is returned. A status code of 201 (Created) indicates that the container
            was created as requested. Container &PUT; requests are idempotent and a code
            of 202 (Accepted) is returned when the container already existed.  If you request a &PUT; to a
            container with an <code>X-Container-Meta-</code> prefix in the header, your &GET;/&HEAD;
            request responses carry the metadata prefix from the container in subsequent
            requests.</para>
          <example>
            <title>Container Create Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 201 Created
  Date: Thu, 07 Jun 2007 18:50:19 GMT
  Server: Apache
  Content-Type: text/plain; charset=UTF-8
                    </literallayout>
          </example>
          <para>Using custom container metadata, you can create information in the header to
          effectively "tag" a container with metadata. The container metadata restrictions are the
          same as object metadata: you can have 4096 bytes maximum overall metadata, 90 distinct
          metadata items at the most. Each may have a 128 character name length with a 256 max value
          length each. Any valid UTF-8 http header value is allowed for metadata, however we
          recommend that you URL-encode any non-ASCII values using a "%" symbol, followed by the
          two-digit hexadecimal representation of the ISO-Latin code for the character.</para>
          
          <example>
            <title>Container Create Request with Metadata </title>
            <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-Container-Meta-InspectedBy: JackWolf
                    </literallayout>
          </example>
          <para>No content is returned. A status code of 201 (Created) indicates that the container
            was created as requested. Container &PUT; requests are idempotent and a code of 202
            (Accepted) is returned if the container existed prior to the request. If you request a &PUT; to a
            container with an <code>X-Container-Meta-</code> prefix in the header, your &GET;/&HEAD;
            request responses carry the metadata prefix from the container in subsequent
            requests.</para>
          <example>
            <title>Container Create Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 201 Created
  Date: Thu, 07 Jun 2010 18:50:19 GMT
  Server: Apache
  Content-Type: text/plain; charset=UTF-8
                    </literallayout>
          </example>
        </section>
        <section xml:id="delete-container">
          <title>Delete Container</title>
          <para>&DELETE; operations against a storage container permanently remove it. The 
            container must be empty before it can be deleted.
            </para>
          <para>A &HEAD; request against the container can be used to determine if it
            contains any objects.</para>
          <example>
            <title>Container Delete Request</title>
            <literallayout class="monospaced">
  DELETE /&lt;api version>/&lt;account>/&lt;container> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
          </example>
          
          <para>No content is returned. A status code of 204 (No Content) indicates success, 404
            (Not Found) is returned if the requested container was not found, and a 409 (Conflict)
            if the container is not empty. No response body is generated.</para>
          <example>
            <title>Container Delete Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 204 No Content
  Date: Thu, 07 Jun 2010 18:57:07 GMT
  Server: Apache
  Content-Length: 0
  Content-Type: text/plain; charset=UTF-8
                    </literallayout>
          </example>
        </section>
        <section xml:id="retrieve-container-metadata">
          <title>Retrieve Container Metadata</title>
          <para>&HEAD; operations against a storage
          container are used to determine the number of objects, and
          the total bytes of all objects stored in the
          container. Since the storage system is designed to store
          large amounts of data, care should be taken when
          representing the total bytes response as an integer; when
          possible, convert it to a 64-bit unsigned integer if your
          platform supports that primitive type.</para>
          <example>
            <title>Container Metadata Request</title>
            <literallayout class="monospaced">
  HEAD /&lt;api version>/&lt;account>/&lt;container> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
          </example>
          <para>The HTTP return code will be 204 (No Content) if the container exists, and 404 (Not
            Found) if it does not. The object count and utilization are returned in the
              <code>X-Container-Object-Count</code> and <code>X-Container-Bytes-Used</code> headers
            respectively.</para>
          <example>
            <title>Container Metadata Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 204 No Content
  Date: Wed, 11 Jul 2010 19:37:41 GMT
  Content-type: text/html
  X-Container-Object-Count: 7
  X-Container-Bytes-Used: 413
  X-Container-Meta-InspectedBy: JackWolf
                    </literallayout>
          </example>
        </section>
        <section xml:id="Update_Container_Metadata-d1e1900">
          <title>Create/Update Container Metadata</title>
          <para>
           You may create any custom or arbitrary metadata headers as you find useful. They
            must, however, take the format <code>X-Container-Meta-</code>.
          </para>
          <para>
            To create or update the arbitrary container metadata, use the &POST; query.
            Subsequent requests of the same key/value pair overwrites the previous value. 
          </para>          
          <example>
            <title>Update Container Metadata Request</title>
            <literallayout class="monospaced">
        POST /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/ HTTP/1.1
        Host: storage.clouddrive.com
        X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
        X-Container-Meta-Book: MobyDick
        X-Container-Meta-Subject: Whaling
                            </literallayout>
          </example>
          <para>No response body is returned. A status code of 204
            (No Content) indicates success; status 404 (Not Found) is
            returned when the requested container does not exist. </para>
          <example>
            <title>Update Container Metadata Response</title>
            <literallayout class="monospaced">
        HTTP/1.1 204 No Content
        Date: Thu, 07 Mar 2012 20:42:51 GMT
        Server: Apache
        Content-Length: 0
        Content-Type: text/plain; charset=UTF-8
                          </literallayout>
          </example>
          <para>To confirm your metadata changes, perform a &HEAD; request on the container. Do not send
          the metadata in your &HEAD; request.</para>
          <example>
            <title>View Container Metadata Request</title>
            <literallayout class="monospaced">
        HEAD /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
        Host: storage.clouddrive.com
        X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                             </literallayout>
          </example>
          <example>
            <title>View Container Metadata Response</title>
            <literallayout class="monospaced">
        HTTP/1.1 204 No Content
        X-Container-Object-Count: 0
        X-Trans-Id: tx028b40d228534c759f4d5fa69f8cf7fd
        X-Container-Meta-Book: MobyDick
        X-Container-Meta-Subject: Whaling
        Accept-Ranges: bytes
        Date: Mon, 12 Mar 2012 16:40:20 GMT
        Content-Length: 0
        X-Container-Bytes-Used: 0
                          </literallayout>
          </example>          
          <!-- Note: using POST with null value should delete a metadata header, but
            this method is not functional with all tools, so we are leaving it out for now.
            A future patch may come where using "-" (dash) for the value will delete it.  dsh - 2012-0309 -->
        </section>

        <section xml:id="delete-container-metadata">
          <title>Delete Container Metadata</title>
          <para>To delete a metadata header send an empty value for
        that particular header, such as
          <code>X-Container-Meta-Book:</code>. </para>
          <para>If the tool you're using to communicate with Object
        Storage doesn't support sending empty headers (older versions
        of curl) send the header
          "X-Remove-Container-Meta-<replaceable>name</replaceable>:
          <replaceable>arbitrary value</replaceable>". For example,
        send a header like <code>X-Remove-Container-Meta-Book:
          x</code>. The <emphasis>value</emphasis> (x in this example)
        is ignored.</para>
          <example>
            <title>Container Metadata Delete Request</title>
            <literallayout class="monospaced">
POST /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
X-Remove-Container-Meta-Book: x
            </literallayout>
            <para>
              No response body is returned. A status code of 204 (No Content)
              indicates success.
            </para>
          </example>
        </section>
      </section>
        
  <section xml:id="Create_Static_Website-dle4000">
    <title>Create Static Website</title>
    <para> You may use your swift account to create a static
      website on the World Wide Web. This mode is normally only 
      active for anonymous requests. If you want to use it with 
      authenticated requests, set the header <code>X-Web-Mode</code> 
      to <code>TRUE</code> on the request.      
      The <code>staticweb</code> filter should be added to the 
      pipeline in your <code>/etc/swift/proxy-server.conf</code> 
      file just after any auth middleware. Beneath the pipeline,
      the <code>staticweb</code> middleware configuration must be added.
      For example:
      <literallayout class="monospaced">
   [DEFAULT]
   ...

   [pipeline:main]
   pipeline = healthcheck cache tempauth staticweb proxy-server

   ...

   [filter:staticweb]
   use = egg:swift#staticweb
   # Seconds to cache container x-container-meta-web-* header values.
   # cache_timeout = 300
   # You can override the default log routing for this filter here:
   # set log_name = staticweb
   # set log_facility = LOG_LOCAL0
   # set log_level = INFO
   # set access_log_name = staticweb
   # set access_log_facility = LOG_LOCAL0
   # set access_log_level = INFO
   # set log_headers = False
      </literallayout>   
      Your publicly readable containers
      will be checked for two headers, <code>X-Container-Meta-Web-Index</code> 
      and <code>X-Container-Meta-Web-Error</code>. (The latter
      header is discussed below, under "Set Error Pages for Static Website".)
      With <code>X-Container-Meta-Web-Index</code>, you determine 
      the index file (or default page served, such as 
      <code>index.html</code>index.html) displays your website. When 
      someone initially enters your site, they don't have to specify the
      index file; index.html file displays automatically.
      If you create sub-directories for your site--which you do by
      creating pseudo-directories in your container--the index page
      displays by default for each sub-directory. If your pseduo-directory 
      does not have a file with the same name as your index file, visits 
      to the sub-directory return a 404 error.
    </para>
    <para>
      You also have the option of displaying a list of files in your 
      pseudo-directory instead of a web page. You do this by setting 
      the <code>X-Container-Meta-Web-Listings</code> header to 
      <code>TRUE</code>. You may add style to your file listing by setting
      <code>X-Container-Meta-Web-Listings-CSS:</code> to a stylesheet
      (i.e., <code>lists.css</code>).
     </para>
  <section xml:id="Examples_for_static_web-dle4025">
  <title>Static Web Middleware via swift</title>
      <example>
        <title>Make Container Publicly Readable</title>
        <para>
        Make the container publicly readable. Once the container
        is publicly readable, you may access your objects directly, but
        you will need to set the inde file to browse the main site 
        URL and its sub-directories.
        </para>
        <literallayout class="monospaced">
   swift post -r '.r:*' container
        </literallayout>
      </example>
     
      <example>
        <title>Set Site's Index File</title>
        <para>Set the index file. In this case, <code>index.html</code> is the
          default file displayed when the site displays.
        </para>
        <literallayout class="monospaced">
   swift post -m 'web-index:index.html' container
        </literallayout>
      </example>

      <example>
        <title>Enable File Listing</title>
        <para>Turn on file listing. If you do not set the index file, list
          the objects in the container. Instructions on styling the list
          with the CSS follow.
        </para>
        <literallayout class="monospaced">
   swift post -m 'web-listings: true' container
        </literallayout>
      </example>

      <example>
        <title>Enable CSS for File Listing</title>
        <para>Style the file listing.
        </para>
        <literallayout class="monospaced">
   swift post -m 'web-listings-css:listings.css' container
        </literallayout>
      </example>
  </section>

  
  <section xml:id="Set_Error_Pages_for_Static_Website-dle4005">
    <title>Set Error Pages for Static Website</title>
    <para> 
      You may create and set custom error pages for visitors to your website; 
      currently, only 401 (Unauthorized) and 404 (Not Found) errors are supported. 
      To do this, set the metadata header, <code>X-Container-Meta-Web-Error</code>.
    </para>
    <para>
      Error pages are served with the &lt;status&gt; code prepended to the name 
      of the error page you set. For instance, if you set 
      <code>X-Container-Meta-Web-Error</code> to <code>error.html</code>, 
      401 errors will display the page <code>401error.html</code>. Similarly, 404 errors 
      will display <code>404error.html</code>. You must have both of these pages created 
      in your container when you set the <code>X-Container-Meta-Web-Error</code> 
      metadata, or your site will display generic error pages.
    </para>
    <para>
      You need only set the <code>X-Container-Meta-Web-Error</code> metadata once 
      for your entire static website.          
    </para>
    <example>
      <title>Set Error Pages for Static Website</title>
      <literallayout>
   swift post -m 'web-error:error.html' container           
          </literallayout>
    </example>
    <para>
      Any 2xx response indicates success.
    </para>
  </section>
 </section>
  
      <section xml:id="storage-object-services">
        <title>Storage Object Services</title>
        <para>An object represents the data and any metadata for the files stored in the
          system. Through the ReST interface, metadata for an object can be included by adding
          custom HTTP headers to the request and the data payload as the request body. Objects
          cannot exceed 5GB and must have names that do not exceed 1024 bytes after URL
          encoding. However, objects larger than 5GB can be segmented and then concatenated together so that you can upload 5 GB segments and download a single concatenated object. You can work with the segments and manifests directly with HTTP requests.</para>
    <section xml:id="retrieve-object">
      <title>Retrieve Object</title>
      <para>&GET; operations against an object are used to retrieve
        the object's data.</para>
      <para>Note that you can perform conditional &GET; requests by
        using certain HTTP headers as documented in RFC 2616.
        OpenStack Object Storage supports the following
        headers:</para>
      <para>RFC 2616: <link
          xlink:href="http://www.ietf.org/rfc/rfc2616.txt"
          >http://www.ietf.org/rfc/rfc2616.txt</link>
      </para>
      <itemizedlist>
        <listitem>
          <para>If-Match</para>
        </listitem>
        <listitem>
          <para>If-None-Match</para>
        </listitem>
        <listitem>
          <para>If-Modified-Since</para>
        </listitem>
        <listitem>
          <para>If-Unmodified-Since</para>
        </listitem>
      </itemizedlist>
      <para>It is also possible to fetch a portion of data using the
        HTTP <code>Range</code> header. At this time, OpenStack Object
        Storage does not support the full specification for
          <code>Range</code> but basic support is provided. OpenStack
        Object Storage only allows a single range that includes OFFSET
        and/or LENGTH. We support a sub-set of <code>Range</code> and
        do not adhere to the full RFC-2616 specification. We support
        specifying OFFSET-LENGTH where either OFFSET or LENGTH can be
        optional (not both at the same time). The following are
        supported forms of the header:</para>
      <itemizedlist>
        <listitem>
          <para><code>Range: bytes=-5</code> - last five bytes of the
            object</para>
        </listitem>
        <listitem>
          <para><code>Range: bytes=10-15</code> - the five bytes after
            a 10-byte offset</para>
        </listitem>
        <listitem>
          <para><code>Range: bytes=32-</code> - all data after the
            first 32 bytes of the object</para>
        </listitem>
      </itemizedlist>
      <example>
        <title>Retrieve Object Request</title>
        <literallayout class="monospaced">
  GET /&lt;api version>/&lt;account>/&lt;container>/&lt;object> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
      </example>
      <para>The object's data is returned in the response body. Object
        metadata is returned as HTTP headers. A status of 200 (Ok)
        indicates success; status 404 (Not Found) is returned if no
        such object exists.</para>
      <example>
        <title>Retrieve Object Response</title>
        <literallayout class="monospaced">
  HTTP/1.1 200 Ok
  Date: Wed, 11 Jul 2010 19:37:41 GMT
  Server: Apache
  Last-Modified: Fri, 12 Jun 2010 13:40:18 GMT
  ETag: b0dffe8254d152d8fd28f3c5e0404a10
  Content-type: text/html
  Content-Length: 512000
                    </literallayout>
        <literallayout class="monospaced">
  [ ... ]
                    </literallayout>
      </example>
    </section>
    <section xml:id="create-update-object">
      <title>Create/Update Object</title>
      <para>&PUT; operations are used to write, or overwrite, an
        object's content and metadata. </para>
      <para>You can ensure end-to-end data integrity by including an
        MD5 checksum of your object's data in the ETag header. You are
        not required to include the ETag header, but it is recommended
        to ensure that the storage system successfully stored your
        object's content.</para>
      <para>You can cause an object to expire after a certain date by
        using the <code>X-Delete-At</code> or
        <code>X-Delete-After</code> headers during an object &PUT;
        operation. When Cloud Files detects one of these headers,
        the system automatically stops serving that object at the
        specified time and shortly after the expiration date, it
        removes the object from the storage system.
      </para>
      <para>The HTTP response will include the MD5 checksum of the
        data written to the storage system. If you do not send the
        ETag in the request, you should compare the value returned
        with your content's MD5 locally to perform the end-to-end data
        validation on the client side. For segmented objects, the ETag
        is the MD5 sum of the concatenated string of ETags for each of
        the segments in the manifest, which only offers change
        detection but not direct comparison.</para>
      <para>Objects can be assigned custom metadata by including
        additional HTTP headers on the &PUT; request.</para>
      <para>The object can be created with custom metadata via HTTP
        headers identified with the <code>X-Object-Meta-</code>
        prefix.</para>
      <example>
        <title>Create/Update Object Request</title>
        <literallayout class="monospaced">
  PUT /&lt;api version>/&lt;account>/&lt;container>/&lt;object> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  ETag: 8a964ee2a5e88be344f36c22562a6486
  Content-Length: 512000
  X-Object-Meta-PIN: 1234
                    </literallayout>
        <literallayout class="monospaced">
  [ ... ]
                    </literallayout>
      </example>
      <para>No response body is returned. A status code of 201
        (Created) indicates a successful write; status 411 (Length
        Required) denotes a missing <code>Content-Length</code> or
          <code>Content-Type</code> header in the request. If the MD5
        checksum of the data written to the storage system does NOT
        match the (optionally) supplied ETag value, a 422
        (Unprocessable Entity) response is returned.</para>
      <example>
        <title>Create/Update Object Response</title>
        <literallayout class="monospaced">
  HTTP/1.1 201 Created
  Date: Thu, 07 Jun 2010 18:57:07 GMT
  Server: Apache
  ETag: d9f5eb4bba4e2f2f046e54611bc8196b
  Content-Length: 0
  Content-Type: text/plain; charset=UTF-8
                    </literallayout>
      </example>

      <section xml:id="large-object-creation">
        <title>Large Object Creation</title>
        <para>Objects that are larger than 5GB must be segmented,
          prior to upload. You then upload the segments like you would
          any other object and create a manifest object telling
          OpenStack Object Storage how to find the segments of the
          large object. The segments remain individually addressable,
          but retrieving the manifest object streams all the segments
          concatenated. There is no limit to the number of segments
          that can be a part of a single large object.</para>

        <para>In order to ensure the download works correctly, you
          must upload all the object segments to the same container,
          ensure each object name has a common prefix where their
          names sort in the order they should be concatenated. You
          also create and upload a manifest file. The manifest file is
          simply a zero-byte file with the extra X-Object-Manifest:
          &lt;container&gt;/&lt;prefix&gt; header, where
          &lt;container&gt; is the container the object segments are
          in and &lt;prefix&gt; is the common prefix for all the
          segments. </para>
        <para>It is best to upload all the segments first and then
          create or update the manifest. With this method, the full
          object will not be available for downloading until the
          upload is complete. Also, you can upload a new set of
          segments to a second location and then update the manifest
          to point to this new location. During the upload of the new
          segments, the original manifest will still be available to
          download the first set of segments.</para>
        <example>
          <title>Upload Segment of a Large Object</title>
          <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  ETag: 8a964ee2a5e88be344f36c22562a6486
  Content-Length: 1
  X-Object-Meta-PIN: 1234
                  </literallayout>
          <literallayout class="monospaced">
  s
                    </literallayout>
        </example>
        <para>No response body is returned. A status code of 201
          (Created) indicates a successful write; status 411 (Length
          Required) denotes a missing <code>Content-Length</code> or
            <code>Content-Type</code> header in the request. If the
          MD5 checksum of the data written to the storage system does
          NOT match the (optionally) supplied ETag value, a 422
          (Unprocessable Entity) response is returned.</para>
        <para>You can continue uploading segments like this example
          shows, prior to uploading the manifest.</para>
        <example>
          <title>Upload Next Segment of the Large Object</title>
          <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  ETag: 8a964ee2a5e88be344f36c22562a6486
  Content-Length: 1
  X-Object-Meta-PIN: 1234
                  </literallayout>
          <literallayout class="monospaced">
  w
                    </literallayout>
        </example>

        <para>Next, upload the manifest you created that indicates the
          container the object segments reside within. Note that
          uploading additional segments after the manifest is created
          will cause the concatenated object to be that much larger
          but you do not need to recreate the manifest file for
          subsequent additional segments.</para>

        <example>
          <title>Upload Manifest</title>
          <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Length: 0
  X-Object-Meta-PIN: 1234
  X-Object-Manifest: container/object/segments
                  </literallayout>
          <literallayout class="monospaced">
  [...]
                    </literallayout>
        </example>
        <para>The response's Content-Type for a &GET; or
            &HEAD; on the manifest will be the same as the
          Content-Type set during the PUT request that created the
          manifest. You can easily change the Content-Type by
          reissuing the &PUT; request.</para>
      </section>
      <section xml:id="chunked-transfer-encoding">
        <title>Chunked Transfer Encoding</title>
        <para>Users can upload data without needing to know in advance
          the amount of data to be uploaded. Users can do this by
          specifying an HTTP header of <code>Transfer-Encoding:
            chunked</code> and not using a <code>Content-Length</code>
          header. A good use of this feature would be doing a DB dump,
          piping the output through gzip, then piping the data
          directly into OpenStack Object Storage without having to
          buffer the data to disk to compute the file size. If users
          attempt to upload more than 5GB with this method, the server
          will close the TCP/IP connection after 5GB and purge the
          customer data from the system. Users must take
          responsibility for ensuring the data they transfer will be
          less than 5GB or for splitting it into 5GB chunks, each in
          its own storage object. If you have files that are larger
          than 5GB and still want to use Object Storage, you can
          segment them prior to upload, upload them to the same
          container, and then use a manifest file to allow downloading
          of a concatenated object containing all the segmented
          objects, concatenated as a single object. </para>
        <example>
          <title>Upload Unspecified Quantity of Content</title>
          <literallayout class="monospaced">
  PUT /&lt;api version>/&lt;account>/&lt;container>/&lt;object> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Transfer-Encoding: chunked
  X-Object-Meta-PIN: 1234
                  </literallayout>
          <literallayout class="monospaced">
  19
  A bunch of data broken up
  D
   into chunks.
  0
                  </literallayout>
        </example>
      </section>
    </section>
        <section xml:id="assigning-cors-headers-to-requests">
          <title>Assigning CORS Headers to Requests</title>
          <para>CORS is a specification that stands for Cross-Origin Resource Sharing. It defines
            how browsers and servers communicate across origins using HTTP headers, such as those
            assigned by Cloud Files API requests. These headers are supported with the Cloud Files
            API. You can read more about the definition of the Access-Control- response headers and
            Origin response header at <link xlink:href="http://www.w3.org/TR/access-control/">www.w3.org/TR/access-control/</link>.<itemizedlist>
              <listitem>
                <para>Access-Control-Allow-Credentials</para>
              </listitem>
              <listitem>
                <para>Access-Control-Allow-Methods</para>
              </listitem>
              <listitem>
                <para>Access-Control-Allow-Origin</para>
              </listitem>
              <listitem>
                <para>Access-Control-Expose-Headers</para>
              </listitem>
              <listitem>
                <para>Access-Control-Max-Age</para>
              </listitem>
              <listitem>
                <para>Access-Control-Request-Headers</para>
              </listitem>
              <listitem>
                <para>Access-Control-Request-Method</para>
              </listitem>
              <listitem>
                <para>Origin</para>
              </listitem>
            </itemizedlist></para>
          <para>These headers can be assigned to objects only. </para>
          <example>
            <title>Assign CORS Header</title>
            <para>In the example, the origin header is assigned that indicates where the file came
              from. This allows you to provide security that requests to your Cloud Files repository
              are indeed from the correct origination:</para>
            <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Origin: http://storage.clouddrive.com
                     </literallayout>
          </example>
        </section>
        <section xml:id="enabling-file-compression-with-content-encoding-header">
          <title>Enabling File Compression with the Content-Encoding Header</title>
          <para>The Content-Encoding header allows a file to be compressed without losing the
            identity of the underlying media type of the file, for example, a video.</para>
          <example>
            <title>Content-Encoding Header Example</title>
            <para>In the example, the content-encoding header is assigned with an attachment type
              that indicates how the file should be downloaded:</para>
            <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Type: video/mp4
  Content-Encoding: gzip
       </literallayout>
          </example>
        </section>
        <section xml:id="enabling-browser-bypass-with-content-disposition-header">
          <title>Enabling Browser Bypass with the Content-Disposition Header</title>
          <para>When an object is assigned the Content-Disposition header you can override a
            browser's default behavior for a file so that the downloader saves the file rather than
            displaying it using default browser settings.</para>
          <example>
            <title>Content-Disposition Header Example</title>
            <para>In the example, the content-encoding header is assigned with an attachment type
              that indicates how the file should be downloaded.</para>
            <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Type: image/tiff
  Content-Disposition: attachment; filename=platmap.tif
                    </literallayout>
          </example>
        </section>
        <section xml:id="Expiring_Objects-e1e3228">
          <title>Expiring Objects with the X-Delete-After and X-Delete-At Headers</title>
          <para>When an object is assigned either an <code>X-Delete-After</code>
            or <code>X-Delete-At</code> header when doing a &PUT; or &POST; on the
            object, it is scheduled for deletion. This feature is
            helpful for objects you do not want to permanently store,
            such as log files, recurring full backups of a dataset, or
            documents or images you know will be outdated at a future
            time.</para>
          <para>The <code>X-Delete-At</code> header requires a Unix Epoch
            timestamp, in integer form; for example: 1348691905
            represents Wed, 26 Sep 2012 20:38:25 GMT. 
            <!--  Exchanged POSIX in / favor of Epoch for the / sake of clarity dsh 02-06-12 -->
            By setting the header to a specific Epoch time, you indicate when you
            want the object to expire, not be served, and be deleted
            completely from the storage system. </para>
          <para>The <code>X-Delete-After</code> header takes an integer number
            of seconds and calculates the amount of time from now that
            you want the object to be deleted. The proxy server that
            receives the request converts this header into an
            <code>X-Delete-At</code> header and calculates the deletion time using
            its current time plus the value given in seconds.</para>
          <para>For existing objects that you want to assign
            expiration headers to, use the &POST; operation.</para>
          <example>
            <title>Delete At Example</title>
            <para>In the example, the <code>X-Delete-At</code> header is assigned with a Unix Epoch 
              timestamp in integer form for Mon, 11 Jun 2012 15:38:25 GMT. 
              Use <link xlink:href="http://www.epochconverter.com/">http://www.epochconverter.com/</link> 
              for example timestamps and a batch converter.</para>
            <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Type: image/jpeg
    X-Delete-At: 1339429105
                    </literallayout>
          </example>
          <example>
            <title>Delete After Example</title>
            <para>
              <!-- Reworded this here /  paragraph to make more sense / and match what I see dsh 02-06-12 -->
              In this example, the <code>X-Delete-After</code> header is assigned a value in seconds,
              equivalent to 10 days. After this time, the object shall expire.  
              <!-- Removed, "The system then converts the time necessary for an <code>X-Delete-At</code> header operation." Doesn't seem to match dsh 02-06-12--></para>
            <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Type: image/jpeg
  X-Delete-After: 864000
                    </literallayout>
          </example>
        </section>
        
        <section xml:id="Object_Versioning-e1e3230"> <!-- begin 4.3.2.7 -->
          <title>Object Versioning</title>       
          <para>
            Object Versioning allows you to store multiple versions of your content to 
            recover from unintended overwrites and deletions. 
            It provides an easy method to implement version control which can be used 
            on any type of content. It is strongly recommended that you put non-current 
            objects in a container apart from where the current versions exist. 
            Once you enable Object Versioning, new data written to an object causes the 
            last-current version to be written to the separate container. Each of the 
            non-current versions has a timestamp appended to it, so you know when it was created.
          </para>
          <para>
            To enable Object Versioning, set <code>allow_versions</code> to <code>TRUE</code>
            in the conainer config. Then, create a container where your non-current versions 
            will be written. Next, set the metadata <code>X-Versions-Location</code> header 
            on the container that holds the current versions of your objects. 
            Set the metadata header to point to the new non-current version container you 
            created. This is where you non-current versions will be stored.
            Once this is done, each object in your current-version container 
            will have Object Versioning enabled; changes to the objects automatically create 
            non-current versions in the separate container.
          </para>
          <para>
            Nothing is written to the non-current version container when you initially
            &PUT; an object into the current-version container. Only when you make 
            edits to the objects via &PUT; will you create non-current versions. These non-current 
            versions are labeled according to the schema below. 
          </para>
          <para>
            <emphasis>Naming Schema:</emphasis> Non-current versions are assigned the name 
            &lt;length&gt;&lt;object_name&gt;/&lt;timestamp&gt;, 
            where length is the 3-character zero-padded hexidecimal character length of the &lt;object_name&gt; 
            and &lt;timestamp&gt; is when the it was initially created as a current version.
          </para>    
          <para>
            Any return status in the 2xx range, such as 202 (Accepted), notes success. Status codes 
            in the 4xx or 5xx range note failure. You should retry your request if you receive an error. 
            Please note, however, that if you have specified a container that does not exist as your 
            non-current version container, a status of 412 (Precondition Failed) returns when you edit 
            the versioned object. If you receive this error, check that the container exists. 
          </para>
          <para>
            A &GET; to a versioned object returns the current version of the object without 
            having to do any request redirects or metadata lookups.
          </para>
          <para>
            A &POST; to a versioned object only updates the object's metadata; it does
            not create a new version of the object. In other words, new versions are only 
            created when the content of the object changes.
          </para>
          <para>
            A &DELETE; to a versioned object removes the current version of the 
            object and replaces it with the next-most current version, moving it 
            from the non-current container to the current.
            This next-most current version carries with it any metadata last set on it.
            If want to completely remove an object and you have five total versions of it,
            you must &DELETE; it five times.
          </para>
          <para>
            Note: A large-object manifest file cannot be versioned, but it may point to 
            versioned segments. 
          </para>
          <para>
            To turn off Object Versioning on your current version container, remove its 
            <code>X-Versions-Location</code> metadata by sending an empty key value.
          </para>
          <example>
            <title>Object Versioning with cURL</title>
            <para>
              First, create a container with the <code>X-Versions-Location</code> header or add 
              the header to an existing container. Also make sure the container 
              referenced by the <code>X-Versions-Location</code> exists. In this example, the 
              name of that container is “versions”; the location for the current version
              is the container "container".
            </para>
            <literallayout class="monospaced">
  curl -i -XPUT -H "X-Auth-Token: &lt;token&gt;" \
      -H "X-Versions-Location: versions" http://&lt;storage_url&gt;/container
  curl -i -XPUT -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/versions
                </literallayout>
            <para>
              Create an object (the first version):
            </para>
            <literallayout class="monospaced">
  curl -i -XPUT --data-binary 1 -H "X-Auth-Token: &lt;token&gt;" \
      http://&lt;storage_url&gt;/container/myobject
            </literallayout>
            <para>
              Now create a new version of that object:
            </para>
            <literallayout class="monospaced">
  curl -i -XPUT --data-binary 2 -H "X-Auth-Token: &lt;token&gt;" \
      http://&lt;storage_url&gt;/container/myobject
            </literallayout>
            <para>
              See a listing of the older versions of the object:
            </para>
            <literallayout  class="monospaced">
  curl -i -H "X-Auth-Token: &lt;token&gt;" \
      http://&lt;storage_url&gt;/versions?prefix=008myobject/
            </literallayout>
            <para>
              Now delete the current version of the object and see that the older 
              version is gone:
            </para>
            <literallayout  class="monospaced">
  curl -i -XDELETE -H "X-Auth-Token: &lt;token&gt;" \
      http://&lt;storage_url&gt;/container/myobject
  curl -i -H "X-Auth-Token: &lt;token&gt;" \
      http://&lt;storage_url&gt;/versions?prefix=008myobject/
            </literallayout>           
          </example>
        </section>   
        
        
        
        
        <section xml:id="copy-object">
            <title>Copy Object</title>
            <para>Suppose you upload a file with the wrong object name or content type, or you
              needed to move some objects to another container. Without a server-side copy feature,
              you would need to repeat uploading the same content and then delete the existing
              object. With server-side object copy, you can save the step of re-uploading the
              content and thus also save the associated bandwidth charges, if any were to apply. </para>
            <para>There are two ways to copy an existing object to another object in OpenStack Object Storage.
              One way is to do a &PUT; to the new object (the target) location, but add the
              <code>“X-Copy-From”</code> header to designate the source of the data. The header value should be
              the container and object name of the source object in the form of “/container/object”.
              Also, the <code>X-Copy-From</code> &PUT; requests require a Content-Length header, even if it is zero
              (0).</para><literallayout class="monospaced">
  PUT /&lt;api version>/&lt;account>/&lt;container>/&lt;destobject> HTTP/1.1
  Host: &lt;storage URL>
  X-Auth-Token: &lt;some-auth-token>
  X-Copy-From: /&lt;container>/&lt;sourceobject>
  Content-Length: 0                    </literallayout>
            <para>The second way to do an object copy is similar. Do a &COPY; to the existing object,
              and include the “Destination” header to specify the target of the copy. The header
              value is the container and new object name in the form of “/container/object”.
              <literallayout>
  COPY /&lt;api version>/&lt;account>/&lt;container>/&lt;sourceobject> HTTP/1.1
  Host: &lt;storage URL>
  X-Auth-Token: &lt;some-auth-token>
  Destination: /&lt;container>/&lt;destobject></literallayout></para>
            <para>With both of these methods, the destination container must exist before
            attempting the copy.</para>
          <para>
            If you wanted to move the object rather than copy it, you need to send a &DELETE; request to
            the old object. A move is simply
            a &COPY; + &DELETE;. All metadata is preserved during the object copy. Note that
            you can set metadata on the request to copy the object (either the &PUT; or the &COPY;)
            and the metadata will overwrite any conflicting keys on the target (new) object. One
            interesting use case is to copy an object to itself and set the content type to a new
            value. This is the only way to change the content type of an existing object.
          </para>
        </section>
        <section xml:id="delete-object">
          <title>Delete Object</title>
          <para>&DELETE; operations on an object are used to permanently remove an
            object from the storage system (metadata and data).</para>
          <para>Deleting an object is processed immediately at the time of the request. Any
            subsequent &GET;, &HEAD;, &POST;, or
            &DELETE; operations will return a 404 (Not Found) error.
          </para>
          <para>Objects with the <code>X-Delete-At</code> or <code>X-Delete-After</code> header
            assigned are deleted within one day of the expiration time
            and the object is not served immediately after the
            expiration time. Refer to <link linkend="Expiring_Objects-e1e3228">Expiring Objects</link> for more details.
          </para>
          <example>
            <title>Object Delete Request</title>
            <literallayout class="monospaced">
  DELETE /&lt;api version>/&lt;account>/&lt;container>/&lt;object> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
          </example>
          <para>No response body is returned. A status code of 204 (No Content) indicates success;
            status code 404 (Not Found) is returned when the object does not exist.</para>
          <example>
            <title>Object Delete Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 204 No Content
  Date: Thu, 07 Jun 2010 20:59:39 GMT
  Server: Apache
  Content-Type: text/plain; charset=UTF-8
                    </literallayout>
          </example>
        </section>
        <section xml:id="retrieve-object-metadata">
          <title>Retrieve Object Metadata</title>
          <para>&HEAD; operations on an object are used to retrieve object metadata and
            other standard HTTP headers.</para>
          <para>The only required header to be sent in the request is the authorization
            token.</para>
          <example>
            <title>Object Metadata Request</title>
            <literallayout class="monospaced">
  HEAD /&lt;api version>/&lt;account>/&lt;container>/&lt;object> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
          </example>
          <para>No response body is returned. Metadata is returned as HTTP headers. A status code of
          200 (OK) indicates success; status 404 (Not Found) is returned when the object does not
          exist.
          </para>
          <para>     
            You may note that the &HEAD; return code for the object is different from that of the 
            container. &HEAD; requests do not return a message body in the response, so anything in 
            the 2xx response code range notes success. When a &HEAD; query is run against the 
            container, it queries the container databases, and it does not retrieve the content 
            of them, thus the 204 (No Content) return code. However, when a &HEAD; query is run 
            against the object, it returns an "OK" response because it can view the content. 
            In other words, the object &HEAD; query has a container length, but the container &HEAD; 
            query has zero content length.
          </para>
          <example>
            <title>Object Metadata Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 200 OK
  Date: Thu, 07 Jun 2010 20:59:39 GMT
  Server: Apache
  Last-Modified: Fri, 12 Jun 2010 13:40:18 GMT
  ETag: 8a964ee2a5e88be344f36c22562a6486
  Content-Length: 512000
  Content-Type: text/plain; charset=UTF-8
  X-Object-Meta-Meat: Bacon
  X-Object-Meta-Fruit: Bacon
  X-Object-Meta-Veggie: Bacon
  X-Object-Meta-Dairy: Bacon
                    </literallayout>
          </example>
        </section>
        <section xml:id="update-object-metadata">
          <title>Update Object Metadata</title>
          <para>&POST; operations against an object name are used to
          set and overwrite arbitrary key/value metadata or to assign
          headers not already assigned such as
          <code>X-Delete-At</code> or <code>X-Delete-After</code>
          for expiring objects. You cannot use the &POST; operation to
          change any of the object's other headers such as
          <code>Content-Type</code>, <code>ETag</code>, etc. It is
          not used to upload storage objects (see &PUT;). Also refer
          to <link linkend="Copy_Object-d1e2241">copying an
            object</link> when you need to update metadata or other
          headers such as Content-Type or CORS headers. 
          </para>
          <para>Key names must be prefixed with <code>X-Object-Meta-</code>. A &POST;
            request will delete all existing metadata added with a previous
            &PUT;/&POST;.</para>
          <example>
            <title>Update Object Metadata Request</title>
            <literallayout class="monospaced">
  POST /&lt;api version>/&lt;account>/&lt;container>/&lt;object> HTTP/1.1
  Host: storage.swiftdrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-Object-Meta-Fruit: Apple
  X-Object-Meta-Veggie: Carrot
                      </literallayout>
          </example>
          <para> No response body is returned. A status code of 202 (Accepted) indicates success;
            status 404 (Not Found) is returned if the requested object does not exist. </para>
          <example>
            <title>Update Object Metadata Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 202 Accepted
  Date: Thu, 07 Jun 2010 20:59:39 GMT
  Server: Apache
  Content-Length: 0
  Content-Type: text/plain; charset=UTF-8
                    </literallayout>
          </example>
        </section>
      </section>
    </chapter>
