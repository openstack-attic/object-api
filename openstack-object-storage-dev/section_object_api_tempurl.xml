<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
 <!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY HEAD   '<command xmlns="http://docbook.org/ns/docbook">HEAD</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
]>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:db="http://docbook.org/ns/docbook" version="5.0"
    xml:id="object-storage-tempurl">
    <title>Temporary URL middleware</title>
    <section xml:id="temp-url-overview">
        <?dbhtml stop-chunking?>
        <title>Overview</title>
        <para>A temporary URL gives users temporary access to
            objects.</para>
        <para>For example, a website might want to provide a link to
            download a large object in Object Storage, but the Object
            Storage account has no public access. The website can
            generate a URL that provides time-limited &GET; access to
            the object.</para>
        <para>When the web browser user clicks on the link, the
            browser downloads the object directly from Object Storage,
            eliminating the need for the website to act as a proxy for
            the request.</para>
        <note>
            <para>To enable direct-from-browser uploads to specific
                Object Storage locations, you can use temporary URLs
                in combination with browser form &POST; requests. See
                    <xref linkend="object-storage-form-post"/>.</para>
        </note>
        <para>A temporary URL is comprised of the URL for an object
            with these added query parameters:</para>
        <variablelist wordsize="10">
            <varlistentry>
                <term><emphasis role="bold"
                    >temp_url_sig</emphasis></term>
                <listitem>
                    <para>Required. An HMAC-SHA1 cryptographic
                        signature that defines the following for the
                        temporary URL: The allowed HTTP method, the
                        expiration date, the full path to the object,
                        and the secret key. For more information, see
                            <xref linkend="signature"/>.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis role="bold"
                        >temp_url_expires</emphasis></term>
                <listitem>
                    <para>Required. An expiration date as a UNIX Epoch
                        timestamp, which is an integer value. For
                        example, <literal>1390852007</literal>
                        represents <literal>Mon, 27 Jan 2014 19:46:47
                            GMT</literal>. For more information, see
                            <link
                            xlink:href="http://www.epochconverter.com/"
                            >Epoch &amp; Unix Timestamp Conversion
                            Tools</link>.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis role="bold">filename</emphasis></term>
                <listitem>
                    <para>Optional. Overrides the default file name
                        that Object Storage generates for &GET;
                        temporary URLs, Object Storage generates a
                        file name that is based on the object name and
                        returns this value in the
                            <literal>Content-Disposition</literal>
                        response header. Browsers can interpret this
                        file name value as a file attachment to be
                        saved.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>An example temporary URL is:</para>
        <screen><computeroutput>https://swift-cluster.example.com/v1/my_account/container/object
?temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709
&amp;temp_url_expires=1323479485</computeroutput></screen>
        <para>An example temporary URL with the
                <parameter>filename</parameter> query parameter
            is:</para>
        <screen><computeroutput>https://swift-cluster.example.com/v1/my_account/container/object
?temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709
&amp;temp_url_expires=1323479485
&amp;filename=My+Test+File.pdf</computeroutput></screen>
        <para>The <parameter>filename</parameter> query parameter sets
            the file name to <filename>My Test File.pdf</filename>,
            which overrides the default file name that Object Storage
            generates.</para>
        <section xml:id="account-secret-keys-temp-url">
            <title>Account secret keys</title>
            <para>Object Storage supports up to two secret
                keys.</para>
            <para>To set these keys, set one or both of the following
                request headers to arbitrary values:</para>
            <itemizedlist>
                <listitem>
                    <para><literal>X-Account-Meta-Temp-URL-Key</literal></para>
                </listitem>
                <listitem>
                    <para><literal>X-Account-Meta-Temp-URL-Key-2</literal></para>
                </listitem>
            </itemizedlist>
            <para>The arbitrary values serve as the secret
                keys.</para>
            <para>Object Storage checks signatures against both keys,
                if present, to enable key rotation without
                invalidating existing temporary URLs.</para>
            <para>For example, use the <command>swift post</command>
                command to set the secret key to
                    <replaceable>MYKEY</replaceable>:</para>
            <screen><prompt>$</prompt> <userinput>swift post -m "X-Account-Meta-Temp-URL-Key: <replaceable>MYKEY</replaceable>"</userinput></screen>
            <note>
                <para>Changing these headers invalidates any
                    previously generated temporary URLs within 60
                    seconds, which is the memcache time for the
                    key.</para>
            </note>
        </section>
        <section xml:id="signature">
            <title>HMAC-SHA1 signature</title>
            <para>An HMAC-SHA1 cryptographic signature defines the
                allowed HTTP method (typically, &GET; or &PUT;), the
                expiration date as a UNIX Epoch timestamp, the full
                path to the object, and the secret key set as the
                    <literal>X-Account-Meta-Temp-URL-Key</literal>
                header value. For more information, see <link
                    xlink:href="http://www.ietf.org/rfc/rfc2104.txt"
                    >RFC 2104: HMAC: Keyed-Hashing for Message
                    Authentication</link>.</para>
            <para>This sample Python code shows how to compute a
                signature:</para>
            <programlisting language="python">import hmac
from hashlib import sha1
from time import time
path = '/v1/my_account/container/object_prefix'
redirect = 'https://myserver.com/some-page'
max_file_size = 104857600
max_file_count = 10
expires = int(time() + 600)
key = '<replaceable>MYKEY</replaceable>'
hmac_body = '%s\n%s\n%s\n%s\n%s' % (path, redirect,
max_file_size, max_file_count, expires)
signature = hmac.new(key, hmac_body, sha1).hexdigest()</programlisting>
            <para>The <replaceable>MYKEY</replaceable> value is the
                value you set in the
                    <literal>X-Account-Meta-Temp-URL-Key</literal>
                request header on the account.</para>
        </section>

        <section xml:id="swift-temp-url-script">
            <title>swift-temp-url script</title>
            <para>Object Storage provides the
                    <command>swift-temp-url</command> script that
                auto-generates the <parameter>temp_url_sig</parameter>
                and <parameter>temp_url_expires</parameter> query
                parameters. For example, you might run this
                command:</para>
            <screen><prompt>$</prompt> <userinput>bin/swift-temp-url GET 3600 /v1/my_account/container/object <replaceable>MYKEY</replaceable></userinput></screen>
            <para>This command returns the path:</para>
            <screen><computeroutput>/v1/my_account/container/object
?temp_url_sig=5c4cc8886f36a9d0919d708ade98bf0cc71c9e91
&amp;temp_url_expires=1374497657</computeroutput></screen>
            <para>To create the temporary URL, prefix this path with
                the Object Storage storage host name. For example,
                prefix the path with
                    <literal>https://swift-cluster.example.com</literal>,
                as follows:</para>
            <screen><computeroutput>https://swift-cluster.example.com/v1/my_account/container/object
?temp_url_sig=5c4cc8886f36a9d0919d708ade98bf0cc71c9e91
&amp;temp_url_expires=1374497657</computeroutput></screen>
        </section>
    </section>
    <section xml:id="create_temp_urls">
        <title>Create and use temporary URLs</title>
        <procedure>
            <step>
                <para>Ask your cloud administrator to enable the
                    temporary URL feature. For information, see the
                        <link
                        xlink:href="http://docs.openstack.org/havana/config-reference/content/object-storage-tempurl.html"
                        >Temporary URL</link> in the
                        <citetitle>OpenStack Configuration
                        Reference</citetitle>.</para>
            </step>
            <step>
                <para>Set the
                        <literal>X-Account-Meta-Temp-URL-Key</literal>
                    header on your Object Storage account to an
                    arbitrary string, which serves as a secret
                    key.</para>
                <para>For example, use the <command>swift</command>
                    command-line tool to set the secret key to
                        <literal>MYKEY</literal>:</para>
                <screen><prompt>$</prompt> <userinput>swift post -m "X-Account-Meta-Temp-URL-Key: MYKEY"</userinput></screen>
            </step>
            <step>
                <para>Generate an HMAC-SHA1 (RFC 2104) signature to
                    specify:</para>
                <itemizedlist>
                    <listitem>
                        <para>Which HTTP method to allow. Typically,
                            &GET; or &PUT;.</para>
                    </listitem>
                    <listitem>
                        <para>The expiry date as a UNIX
                            timestamp.</para>
                    </listitem>
                    <listitem>
                        <para>The full path to the object.</para>
                    </listitem>
                    <listitem>
                        <para>The secret key set as the
                                <literal>X-Account-Meta-Temp-URL-Key</literal>
                            header value.</para>
                    </listitem>
                </itemizedlist>
                <para>The following code generates the signature for a
                    &GET; request for 24 hours on the
                        <literal>/v1/my_account/container/object</literal>
                    object:</para>
                <programlisting language="python">import hmac
from hashlib import sha1
from time import time
method = 'GET'
duration_in_seconds = 60*60*24
expires = int(time() + duration_in_seconds)
path = '/v1/my_account/container/object'
key = '<replaceable>MYKEY</replaceable>'
hmac_body = '%s\n%s\n%s' % (method, expires, path)
sig = hmac.new(key, hmac_body, sha1).hexdigest()
s = 'https://{host}/{path}?temp_url_sig={sig}&amp;temp_url_expires={expires}'
url = s.format(host='swift-cluster.example.com', path=path, sig=sig)</programlisting>
                <para> If the value of <literal>expires</literal> is
                        <literal>1323479485</literal> and the value of
                        <literal>sig</literal> is
                        <literal>da39a3ee5e6b4b0d3255bfef95601890afd80709</literal>,
                    the temporary URL is:</para>
                <screen><computeroutput>https://swift-cluster.example.com/v1/my_account/container/object?
                temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;
                temp_url_expires=1323479485</computeroutput></screen>
                <para>Any change to the resource path or query
                    arguments causes a <errorcode>401</errorcode>
                    <errortext>Unauthorized</errortext> error.
                    Similarly, substituting a &PUT; where &GET; is the
                    allowed method causes a <errorcode>401</errorcode>
                    error.</para>
                <para>You can substitute &HEAD; where &GET; or &PUT;
                    is allowed.</para>
                <note>
                    <para>Changing the
                            <literal>X-Account-Meta-Temp-URL-Key</literal>
                        invalidates any previously generated temporary
                        URLs within 60 seconds, which is the memcache
                        time for the key. Object Storage supports up
                        to two keys, which you set in the
                            <literal>X-Account-Meta-Temp-URL-Key</literal>
                        and
                            <literal>X-Account-Meta-Temp-URL-Key-2</literal>
                        headers. Object Storage checks signatures
                        against both keys, if present, to enable key
                        rotation without invalidating existing
                        temporary URLs.</para>
                </note>

            </step>
            <step>
                <para>With &GET; temporary URLs, the
                        <literal>Content-Disposition</literal>
                    response header contains the file name. The file
                    name defaults to a value based on the object name,
                    but you can use the <literal>filename</literal>
                    query parameter to override the default file name
                    value. Browsers can use this file name value as a
                    file attachment to be saved.</para>
                <para>This temporary URL sets the
                        <parameter>filename</parameter> query
                    parameter to <filename>My Test
                    File.pdf</filename>:</para>
                <screen><computeroutput>https://swift-cluster.example.com/v1/my_account/container/object?temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;temp_url_expires=1323479485&amp;filename=My+Test+File.pdf</computeroutput></screen>
            </step>
            <step>
                <para>Provide the temporary URL to users. If the user
                    shares a temporary URL, the direct access is
                    limited to the expiration time set when the
                    website created the link.</para>
            </step>
        </procedure>
    </section>
</section>
